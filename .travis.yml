language: go

git:
  depth: false

os: linux

dist: bionic

services:
  - docker

go:
  - 1.14

env:
  - HOME=/home/travis

cache:
  directories:
    - $HOME/.cache/go-build
    - $HOME/gopath

before_install:
  - |
      if ! git diff --name-only $TRAVIS_COMMIT_RANGE | grep -qvE '(\.md)|(\.png)|(\.pdf)|(\.html)|^(LICENSE)|^(docs)|^(OWNERS)|^(MAINTAINERS)'
      then
        echo "Only doc files were updated, skip running the CI."
        travis_terminate 0
      fi

install:
  - git status
  - cd $HOME
  - export GO111MODULE=on
  - go get github.com/onsi/ginkgo/ginkgo
  - go get sigs.k8s.io/kind@v0.7.0
  - sudo apt-get update && sudo apt-get install -y apt-transport-https
  - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
  - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
  - sudo apt-get update
  - sudo apt-get install -y kubectl
  - |
    if ! [[ -d $(go env GOPATH)/src/k8s.io/kubernetes ]]
    then
      git clone https://github.com/kubernetes/kubernetes.git -b v1.18.6 $(go env GOPATH)/src/k8s.io/kubernetes
    fi
  - cd $(go env GOPATH)/src/k8s.io/kubernetes
  - |
    if ! [[ -s ./_output/local/go/bin/e2e.test ]]
    then
      travis_wait 30 make
    fi
  - cd $(go env GOPATH)/src/github.com/daixiang0/kubeedge
  - git status

jobs:
  include:
    - stage: "Test conformance"
      name: "Test conformance about sig-api-machinery"
      script:
        - git checkout .
        - ENABLE_DAEMON=true ./hack/local-up-kubeedge.sh
        - travis_wait 120 $(go env GOPATH)/src/k8s.io/kubernetes/_output/local/go/bin/e2e.test --provider=local --kubeconfig=$HOME/.kube/config --ginkgo.skip="Aggregator|CustomResourceConversionWebhook|consumable" --ginkgo.focus="sig-api-machinery.*Conformance"
    - name: "Test conformance about sig-apps"
      script:
        - git checkout .
        - ENABLE_DAEMON=true ./hack/local-up-kubeedge.sh
        - travis_wait 120 $(go env GOPATH)/src/k8s.io/kubernetes/_output/local/go/bin/e2e.test --provider=local --kubeconfig=$HOME/.kube/config --ginkgo.focus="sig-apps.*Conformance"
    - name: "Test conformance about sig-auth"
      script:
        - git checkout .
        - ENABLE_DAEMON=true ./hack/local-up-kubeedge.sh
        - travis_wait $(go env GOPATH)/src/k8s.io/kubernetes/_output/local/go/bin/e2e.test --provider=local --kubeconfig=$HOME/.kube/config --ginkgo.focus="sig-auth.*Conformance"
    - name: "Test conformance about sig-cli"
      script:
        - git checkout .
        - ENABLE_DAEMON=true ./hack/local-up-kubeedge.sh
        - travis_wait 120 $(go env GOPATH)/src/k8s.io/kubernetes/_output/local/go/bin/e2e.test --provider=local --kubeconfig=$HOME/.kube/config --ginkgo.skip="should create and stop a working application" --ginkgo.focus="sig-cli.*Conformance"
    - name: "Test conformance about sig-network"
      script:
        - git checkout .
        - ENABLE_DAEMON=true ./hack/local-up-kubeedge.sh
        - travis_wait 120 $(go env GOPATH)/src/k8s.io/kubernetes/_output/local/go/bin/e2e.test --provider=local --kubeconfig=$HOME/.kube/config --ginkgo.skip="DNS|env vars|communication|Services" --ginkgo.focus="sig-network.*Conformance"
    - name: "Test conformance about sig-node"
      script:
        - git checkout .
        - ENABLE_DAEMON=true ./hack/local-up-kubeedge.sh
        - travis_wait $(go env GOPATH)/src/k8s.io/kubernetes/_output/local/go/bin/e2e.test --provider=local --kubeconfig=$HOME/.kube/config --ginkgo.skip="env|Events|PreStop|Services|limits" --ginkgo.focus="sig-node.*Conformance"
    - name: "Test conformance about sig-storage"
      script:
        - git checkout .
        - ENABLE_DAEMON=true ./hack/local-up-kubeedge.sh
        - travis_wait 120 $(go env GOPATH)/src/k8s.io/kubernetes/_output/local/go/bin/e2e.test --provider=local --kubeconfig=$HOME/.kube/config --ginkgo.skip="optional updates|provide node allocatable|shared volumes" --ginkgo.focus="sig-storage.*Conformance"
    - stage: "Verify vendor, licenses, do lint"
      name: "Verify vendor, licenses, do lint"
      before_script:
        - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | BINARY=golangci-lint sh -s -- -d -b $(go env GOPATH)/bin v1.23.7
        - export GO111MODULE=on
        - export GOFLAGS=-mod=mod
        - sudo apt-get install jq -y
      script:
        - make verify
        - make lint

    - stage: "Test on amd64"
      name: "build, smallbuild, crossbuild"
      arch: amd64
      before_script:
        - sudo apt-get install upx-ucl -y
        - sudo apt-get install gcc-aarch64-linux-gnu -y
        - sudo apt-get install libc6-dev-arm64-cross -y
        - sudo apt-get install gcc-arm-linux-gnueabi -y
        - sudo apt-get install libc6-dev-armel-cross -y
        - export GOFLAGS=-mod=vendor
      script:
        - make
        - make bluetoothdevice
        - make smallbuild
        - make crossbuild
        - make crossbuild GOARM=GOARM7
    - name: "unit test, integration test edge"
      arch: amd64
      before_script:
        - go get github.com/onsi/ginkgo/ginkgo
        - export GOFLAGS=-mod=mod
      script:
        - make test
        - make integrationtest
    - name: "e2e test"
      arch: amd64
      script:
        - travis_retry make e2e
    - name: "keadm e2e test"
      arch: amd64
      script:
        - travis_retry make keadm_e2e
    - name: "build docker images on amd64"
      arch: amd64
      script:
        - make cloudimage
        - make admissionimage
        - make edgeimage ARCH="amd64"
        - make edgesiteimage ARCH="amd64"
        - make bluetoothdevice_image

    - stage: "Test on arm64"
      name: "build, smallbuild"
      arch: arm64
      before_script:
        - export GOFLAGS=-mod=vendor
        - sudo apt-get install upx-ucl -y
      script:
        - make
        - make bluetoothdevice
        - make smallbuild
    - name: "unit test, integration test edge"
      arch: arm64-graviton2
      virt: vm
      before_script:
        - go get github.com/onsi/ginkgo/ginkgo
        - export GOFLAGS=-mod=mod
      script:
        - make test
        - make integrationtest
    - name: "e2e test"
      arch: arm64-graviton2
      virt: vm
      before_script:
        - go get github.com/onsi/ginkgo/ginkgo
        - go get sigs.k8s.io/kind@v0.7.0
        - go mod vendor
        - export GOFLAGS=-mod=vendor
        - sudo apt-get update && sudo apt-get install -y apt-transport-https
        - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
        - sudo apt-get update
        - sudo apt-get install -y kubectl
      script:
        - travis_retry make e2e
    - name: "keadm e2e test"
      arch: arm64-graviton2
      virt: vm
      before_script:
        - go get github.com/onsi/ginkgo/ginkgo
        - go get sigs.k8s.io/kind@v0.7.0
        - go mod vendor
        - export GOFLAGS=-mod=vendor
        - sudo apt-get update && sudo apt-get install -y apt-transport-https
        - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
        - sudo apt-get update
        - sudo apt-get install -y kubectl
      script:
        - travis_retry make keadm_e2e
    - name: "build docker images on arm64"
      arch: arm64
      script:
        - make cloudimage
        - make admissionimage
        - make edgeimage ARCH="arm64v8"
        - make edgesiteimage ARCH="arm64v8"
        - make bluetoothdevice_image
